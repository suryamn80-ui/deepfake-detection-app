{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":43163,"status":"ok","timestamp":1755777717123,"user":{"displayName":"surya m n","userId":"14579928003229512887"},"user_tz":-330},"id":"WoAgDefFf0me","outputId":"6bc70430-28c2-4e1c-9505-058202497178"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: kaggle in /usr/local/lib/python3.12/dist-packages (1.7.4.5)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.12/dist-packages (2.19.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.12/dist-packages (from kaggle) (6.2.0)\n","Requirement already satisfied: certifi>=14.05.14 in /usr/local/lib/python3.12/dist-packages (from kaggle) (2025.8.3)\n","Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.12/dist-packages (from kaggle) (3.4.3)\n","Requirement already satisfied: idna in /usr/local/lib/python3.12/dist-packages (from kaggle) (3.10)\n","Requirement already satisfied: protobuf in /usr/local/lib/python3.12/dist-packages (from kaggle) (5.29.5)\n","Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.12/dist-packages (from kaggle) (2.9.0.post0)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.12/dist-packages (from kaggle) (8.0.4)\n","Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (from kaggle) (2.32.4)\n","Requirement already satisfied: setuptools>=21.0.0 in /usr/local/lib/python3.12/dist-packages (from kaggle) (75.2.0)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.12/dist-packages (from kaggle) (1.17.0)\n","Requirement already satisfied: text-unidecode in /usr/local/lib/python3.12/dist-packages (from kaggle) (1.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.12/dist-packages (from kaggle) (4.67.1)\n","Requirement already satisfied: urllib3>=1.15.1 in /usr/local/lib/python3.12/dist-packages (from kaggle) (2.5.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.12/dist-packages (from kaggle) (0.5.1)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (25.2.10)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (3.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from tensorflow) (25.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (4.14.1)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (1.17.3)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (1.74.0)\n","Requirement already satisfied: tensorboard~=2.19.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (2.19.0)\n","Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (3.10.0)\n","Requirement already satisfied: numpy<2.2.0,>=1.26.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (2.0.2)\n","Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (3.14.0)\n","Requirement already satisfied: ml-dtypes<1.0.0,>=0.5.1 in /usr/local/lib/python3.12/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.59.1)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.12/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.12/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.12/dist-packages (from keras>=3.5.0->tensorflow) (0.1.0)\n","Requirement already satisfied: optree in /usr/local/lib/python3.12/dist-packages (from keras>=3.5.0->tensorflow) (0.17.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.12/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.8.2)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.12/dist-packages (from tensorboard~=2.19.0->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.1.3)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.12/dist-packages (from werkzeug>=1.0.1->tensorboard~=2.19.0->tensorflow) (3.0.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.12/dist-packages (from rich->keras>=3.5.0->tensorflow) (4.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.12/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.2)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.12/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"]},{"data":{"text/html":["\n","     <input type=\"file\" id=\"files-0378845f-124b-40d9-8fb1-bbcdd05a06ee\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0378845f-124b-40d9-8fb1-bbcdd05a06ee\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Saving kaggle.json to kaggle.json\n","Dataset URL: https://www.kaggle.com/datasets/ciplab/real-and-fake-face-detection\n","License(s): CC-BY-NC-SA-4.0\n","Downloading real-and-fake-face-detection.zip to /content\n"," 97% 418M/431M [00:00<00:00, 378MB/s]\n","100% 431M/431M [00:00<00:00, 454MB/s]\n","real_and_fake_face  real_and_fake_face_detection\n"]}],"source":["# =========================================\n","# STEP 1: Install dependencies\n","# =========================================\n","!pip install kaggle tensorflow matplotlib\n","\n","# =========================================\n","# STEP 2: Kaggle Dataset Setup\n","# =========================================\n","import os\n","from google.colab import files\n","\n","# Make Kaggle folder\n","!mkdir -p ~/.kaggle\n","\n","# Upload kaggle.json (download from Kaggle -> Account -> API)\n","files.upload()\n","\n","# Move kaggle.json\n","!mv kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","\n","# Example dataset: Real and Fake Face Detection (you can change link)\n","!kaggle datasets download -d ciplab/real-and-fake-face-detection\n","\n","# Unzip dataset\n","!unzip -q real-and-fake-face-detection.zip -d deepfake_data\n","\n","# Check folders\n","!ls deepfake_data\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5935,"status":"ok","timestamp":1755777748171,"user":{"displayName":"surya m n","userId":"14579928003229512887"},"user_tz":-330},"id":"bdPAvfEVgfPp","outputId":"56076ca2-0b17-4a6c-db1c-508941019444"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 1633 images belonging to 2 classes.\n","Found 408 images belonging to 2 classes.\n"]}],"source":["# =========================================\n","# STEP 3: Data Preprocessing\n","# =========================================\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    validation_split=0.2\n",")\n","\n","train_data = datagen.flow_from_directory(\n","    \"/content/deepfake_data/real_and_fake_face\",\n","    target_size=(299, 299),   # Xception expects 299x299\n","    batch_size=32,\n","    class_mode=\"binary\",\n","    subset=\"training\"\n",")\n","\n","val_data = datagen.flow_from_directory(\n","    \"/content/deepfake_data/real_and_fake_face\",\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode=\"binary\",\n","    subset=\"validation\"\n",")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2659,"status":"ok","timestamp":1755777773341,"user":{"displayName":"surya m n","userId":"14579928003229512887"},"user_tz":-330},"id":"YEdk5Ruqgm5O","outputId":"ee51ea5e-8a8c-4d98-b11d-542ec56a8c30"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/xception/xception_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m83683744/83683744\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}],"source":["# =========================================\n","# STEP 4: Model with Transfer Learning (Xception)\n","# =========================================\n","from tensorflow.keras.applications import Xception\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout\n","from tensorflow.keras.optimizers import Adam\n","\n","# Load pretrained model\n","base_model = Xception(weights=\"imagenet\", include_top=False, input_shape=(299,299,3))\n","\n","# Freeze layers\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","# Add custom layers\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","x = Dropout(0.5)(x)\n","predictions = Dense(1, activation=\"sigmoid\")(x)\n","\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","# Compile\n","model.compile(optimizer=Adam(learning_rate=0.0001),\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2081565,"status":"ok","timestamp":1755785448668,"user":{"displayName":"surya m n","userId":"14579928003229512887"},"user_tz":-330},"id":"xI_KhSDogrz8","outputId":"5db0599f-2bd4-467b-cb40-8180f5cca74c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n","\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m876s\u001b[0m 17s/step - accuracy: 0.5343 - loss: 0.7001 - val_accuracy: 0.4975 - val_loss: 0.7069\n","Epoch 2/5\n","\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m866s\u001b[0m 17s/step - accuracy: 0.5489 - loss: 0.6887 - val_accuracy: 0.4877 - val_loss: 0.7065\n","Epoch 3/5\n","\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m869s\u001b[0m 17s/step - accuracy: 0.5426 - loss: 0.6895 - val_accuracy: 0.5025 - val_loss: 0.7075\n","Epoch 4/5\n","\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m840s\u001b[0m 16s/step - accuracy: 0.5275 - loss: 0.6952 - val_accuracy: 0.5123 - val_loss: 0.7084\n","Epoch 5/5\n","\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m865s\u001b[0m 17s/step - accuracy: 0.5250 - loss: 0.6905 - val_accuracy: 0.4951 - val_loss: 0.7077\n"]}],"source":["# =========================================\n","# STEP 5: Train the Model\n","# =========================================\n","history = model.fit(\n","    train_data,\n","    validation_data=val_data,\n","    epochs=5\n",")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"elapsed":973,"status":"ok","timestamp":1755785804944,"user":{"displayName":"surya m n","userId":"14579928003229512887"},"user_tz":-330},"id":"Ea6l-lT9_CsL","outputId":"34d29ed4-2758-46da-9929-902f56a7527d"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# =========================================\n","# STEP 6: Visualize Results\n","# =========================================\n","import matplotlib.pyplot as plt\n","\n","plt.plot(history.history[\"accuracy\"], label=\"Train Accuracy\")\n","plt.plot(history.history[\"val_accuracy\"], label=\"Val Accuracy\")\n","plt.legend()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":172370,"status":"ok","timestamp":1755786000629,"user":{"displayName":"surya m n","userId":"14579928003229512887"},"user_tz":-330},"id":"6j8HQCJl_UwP","outputId":"dc3cf085-ef62-4526-9c9d-9f949fb264ad"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m171s\u001b[0m 13s/step - accuracy: 0.5058 - loss: 0.7070\n","Validation Accuracy: 49.51%\n"]}],"source":["# =========================================\n","# STEP 7: Evaluate the Model\n","# =========================================\n","loss, acc = model.evaluate(val_data)\n","print(f\"Validation Accuracy: {acc*100:.2f}%\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"wjae30OBALAK","outputId":"f1c6aace-cc58-4f1e-d6a8-8a944b1b02d7"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m173s\u001b[0m 13s/step\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","        Fake       0.48      0.26      0.34       192\n","        Real       0.53      0.75      0.62       216\n","\n","    accuracy                           0.52       408\n","   macro avg       0.51      0.51      0.48       408\n","weighted avg       0.51      0.52      0.49       408\n","\n"]}],"source":["# =========================================\n","# STEP 8: Confusion Matrix & Classification Report\n","# =========================================\n","import numpy as np\n","from sklearn.metrics import classification_report, confusion_matrix\n","import seaborn as sns\n","\n","# Get predictions\n","y_true = val_data.classes\n","y_pred = model.predict(val_data)\n","y_pred = (y_pred > 0.5).astype(int)\n","\n","# Confusion matrix\n","cm = confusion_matrix(y_true, y_pred)\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"Fake\",\"Real\"], yticklabels=[\"Fake\",\"Real\"])\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"True\")\n","plt.show()\n","\n","# Classification report\n","print(classification_report(y_true, y_pred, target_names=[\"Fake\",\"Real\"]))\n"]},{"cell_type":"code","source":["# =========================================\n","# STEP 9: Test on a Single New Image\n","# =========================================\n","from tensorflow.keras.preprocessing import image\n","\n","def predict_image(img_path):\n","    img = image.load_img(img_path, target_size=(299, 299))\n","    img_array = image.img_to_array(img) / 255.0\n","    img_array = np.expand_dims(img_array, axis=0)\n","\n","    prediction = model.predict(img_array)[0][0]\n","    if prediction > 0.5:\n","        print(f\"{img_path} --> Real ✅\")\n","    else:\n","        print(f\"{img_path} --> Fake ❌\")\n","\n","# Example: test with one image from validation set\n","import random\n","test_img = random.choice(val_data.filepaths)\n","print(\"Testing on:\", test_img)\n","predict_image(test_img)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xcfWpapEDMrA","executionInfo":{"status":"ok","timestamp":1755786844925,"user_tz":-330,"elapsed":736,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"a195b835-fe1e-48a7-d247-45bc99317f78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing on: /content/deepfake_data/real_and_fake_face/training_fake/easy_37_0010.jpg\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 620ms/step\n","/content/deepfake_data/real_and_fake_face/training_fake/easy_37_0010.jpg --> Real ✅\n"]}]},{"cell_type":"code","source":["# =========================================\n","# STEP 10: Save & Load Model\n","# =========================================\n","# Save model\n","model.save(\"deepfake_image_model.h5\")\n","\n","# Load model\n","from tensorflow.keras.models import load_model\n","loaded_model = load_model(\"deepfake_image_model.h5\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RRaPFaC5DSkg","executionInfo":{"status":"ok","timestamp":1755786865886,"user_tz":-330,"elapsed":1776,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"b0ee94e8-c253-426e-e96f-2abb2179570d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n","WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.applications import InceptionV3\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n"],"metadata":{"id":"YbPaAn7uzkch","executionInfo":{"status":"ok","timestamp":1755833063519,"user_tz":-330,"elapsed":29,"user":{"displayName":"surya m n","userId":"14579928003229512887"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Load base model\n","base_model = InceptionV3(weights=\"imagenet\", include_top=False, input_shape=(299,299,3))\n","\n","# Add custom layers\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","x = Dense(128, activation=\"relu\")(x)\n","predictions = Dense(1, activation=\"sigmoid\")(x)\n","\n","# Final model\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","# Compile\n","model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hS-6H1tazmjH","executionInfo":{"status":"ok","timestamp":1755833080676,"user_tz":-330,"elapsed":2643,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"6619a7f7-266d-44d7-e0be-8211694811a5"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1rkYl-qoqgF2","executionInfo":{"status":"ok","timestamp":1755847637414,"user_tz":-330,"elapsed":3892,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"a7dcc3ab-b176-416f-ce16-898ff14bb4fa"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["!unzip /content/drive/MyDrive/deepfake_project/dataset.zip -d /content/\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uRf9pxcdrPBE","executionInfo":{"status":"ok","timestamp":1755847677777,"user_tz":-330,"elapsed":629,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"62e9f070-02b0-49a3-96c9-5d6b475772c3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["unzip:  cannot find or open /content/drive/MyDrive/deepfake_project/dataset.zip, /content/drive/MyDrive/deepfake_project/dataset.zip.zip or /content/drive/MyDrive/deepfake_project/dataset.zip.ZIP.\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Check inside MyDrive\n","print(os.listdir(\"/content/drive/MyDrive\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2tIiULCqtJg2","executionInfo":{"status":"ok","timestamp":1755848158211,"user_tz":-330,"elapsed":454,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"05187768-9348-4d6c-f9c8-bdf99fa55489"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["['deepfake project']\n"]}]},{"cell_type":"code","source":["(print(os.listdir(\"/content/drive/MyDrive\")))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q9tRKAWftsvN","executionInfo":{"status":"ok","timestamp":1755848303625,"user_tz":-330,"elapsed":420,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"a18a8975-2843-4f1c-9c7f-200285ee4b67"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["['deepfake project']\n"]}]},{"cell_type":"code","source":["import os\n","\n","base_path = \"/content/drive/MyDrive\"\n","print(\"Folders in MyDrive:\", os.listdir(base_path))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MHaJgzG8u1cn","executionInfo":{"status":"ok","timestamp":1755848606728,"user_tz":-330,"elapsed":1742,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"26bf999c-c990-4cfd-a1f7-9c427da8a736"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Folders in MyDrive: ['deepfake project']\n"]}]},{"cell_type":"code","source":["import os\n","\n","base_dir = \"/content/drive/MyDrive/deepfake project\"\n","\n","# Show everything inside \"deepfake project\"\n","print(\"Contents inside deepfake project:\", os.listdir(base_dir))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NzBy7c3xvYzw","executionInfo":{"status":"ok","timestamp":1755848747628,"user_tz":-330,"elapsed":699,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"90bf0356-2a32-46d8-dfc1-10b56f64a56f"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Contents inside deepfake project: ['deepfake_image_model.h5.zip']\n"]}]},{"cell_type":"code","source":["import zipfile\n","import os\n","\n","zip_path = \"/content/drive/MyDrive/deepfake project/deepfake_image_model.h5.zip\"\n","extract_dir = \"/content/drive/MyDrive/deepfake project\"\n","\n","# Extract zip\n","with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","    zip_ref.extractall(extract_dir)\n","\n","print(\"Extracted contents:\", os.listdir(extract_dir))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vcZuivnTvp17","executionInfo":{"status":"ok","timestamp":1755848833633,"user_tz":-330,"elapsed":19456,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"1ce25af0-891f-499c-87c0-1cc2941d6bba"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Extracted contents: ['deepfake_image_model.h5.zip', 'Sample_fake_images', 'test-20250112T065939Z-001', 'train-20250112T065955Z-001']\n"]}]},{"cell_type":"code","source":["train_dir = \"/content/drive/MyDrive/deepfake project/train-20250112T065955Z-001\"\n","test_dir  = \"/content/drive/MyDrive/deepfake project/test-20250112T065939Z-001\"\n","\n","print(\"Train folders:\", os.listdir(train_dir))\n","print(\"Test folders:\", os.listdir(test_dir))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-5Rnaw7-wB-x","executionInfo":{"status":"ok","timestamp":1755848913205,"user_tz":-330,"elapsed":416,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"e7cd3384-d3dd-4ccd-d68a-f06c869c7635"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Train folders: ['train']\n","Test folders: ['test']\n"]}]},{"cell_type":"code","source":["train_dir = \"/content/drive/MyDrive/deepfake project/train-20250112T065955Z-001/train\"\n","test_dir  = \"/content/drive/MyDrive/deepfake project/test-20250112T065939Z-001/test\"\n","\n","print(\"Train folders:\", os.listdir(train_dir))  # should show ['real', 'fake']\n","print(\"Test folders:\", os.listdir(test_dir))    # should show ['real', 'fake']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kZahPpG5wVJR","executionInfo":{"status":"ok","timestamp":1755848998399,"user_tz":-330,"elapsed":517,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"5aa2b9ca-25aa-42c4-c768-705f1fc8bb7e"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Train folders: ['fake', 'real']\n","Test folders: ['fake', 'real']\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.applications import InceptionV3\n","from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","import os\n","\n","# ✅ Correct dataset paths\n","train_dir = \"/content/drive/MyDrive/deepfake project/train-20250112T065955Z-001/train\"\n","test_dir  = \"/content/drive/MyDrive/deepfake project/test-20250112T065939Z-001/test\"\n","\n","print(\"Train folders:\", os.listdir(train_dir))  # should show ['real', 'fake']\n","print(\"Test folders:\", os.listdir(test_dir))    # should show ['real', 'fake']\n","\n","# ✅ Data Generators\n","train_datagen = ImageDataGenerator(rescale=1./255)\n","test_datagen  = ImageDataGenerator(rescale=1./255)\n","\n","train_data = train_datagen.flow_from_directory(\n","    train_dir,\n","    target_size=(299, 299),  # InceptionV3 expects 299x299\n","    batch_size=32,\n","    class_mode=\"binary\"\n",")\n","\n","val_data = test_datagen.flow_from_directory(\n","    test_dir,\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode=\"binary\"\n",")\n","\n","# ✅ Build model\n","base_model = InceptionV3(weights=\"imagenet\", include_top=False, input_shape=(299,299,3))\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","x = Dense(128, activation=\"relu\")(x)\n","predictions = Dense(1, activation=\"sigmoid\")(x)\n","\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","# Freeze base model layers\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","# ✅ Compile model\n","model.compile(optimizer=Adam(learning_rate=0.0001), loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n","\n","# ✅ Train\n","history = model.fit(\n","    train_data,\n","    validation_data=val_data,\n","    epochs=5\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iGzHM0yNw8jD","executionInfo":{"status":"ok","timestamp":1755850156416,"user_tz":-330,"elapsed":998990,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"2ceb4433-872e-4996-e2d6-ee5f91c10b78"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Train folders: ['fake', 'real']\n","Test folders: ['fake', 'real']\n","Found 443 images belonging to 2 classes.\n","Found 212 images belonging to 2 classes.\n","Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m11/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m27s\u001b[0m 9s/step - accuracy: 0.6509 - loss: 0.6754"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/PIL/Image.py:1047: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m206s\u001b[0m 14s/step - accuracy: 0.6525 - loss: 0.6710 - val_accuracy: 0.6038 - val_loss: 0.6745\n","Epoch 2/5\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m198s\u001b[0m 15s/step - accuracy: 0.6939 - loss: 0.5908 - val_accuracy: 0.6179 - val_loss: 0.6671\n","Epoch 3/5\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m189s\u001b[0m 14s/step - accuracy: 0.7476 - loss: 0.5454 - val_accuracy: 0.6415 - val_loss: 0.6367\n","Epoch 4/5\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m189s\u001b[0m 14s/step - accuracy: 0.7667 - loss: 0.4987 - val_accuracy: 0.7075 - val_loss: 0.5937\n","Epoch 5/5\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m195s\u001b[0m 14s/step - accuracy: 0.7968 - loss: 0.4649 - val_accuracy: 0.7075 - val_loss: 0.5751\n"]}]},{"cell_type":"code","source":["model.save(\"/content/drive/MyDrive/deepfake project/deepfake_image_model.keras\")\n"],"metadata":{"id":"G3444-Xb05Dk","executionInfo":{"status":"ok","timestamp":1755850194510,"user_tz":-330,"elapsed":2048,"user":{"displayName":"surya m n","userId":"14579928003229512887"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Accuracy graph\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n","plt.title(\"Model Accuracy\")\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()\n","plt.show()\n","\n","# Loss graph\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.title(\"Model Loss\")\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"id":"qQyCdZHl1NTJ","executionInfo":{"status":"ok","timestamp":1755850272658,"user_tz":-330,"elapsed":1244,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"ca94c1aa-4821-442d-c9eb-6943d029d5bb"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Test data generator\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","test_data = test_datagen.flow_from_directory(\n","    test_dir,\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode=\"binary\",\n","    shuffle=False  # important for evaluation\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RQmZXJaf1qrk","executionInfo":{"status":"ok","timestamp":1755850390818,"user_tz":-330,"elapsed":1037,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"d52fb69e-c57a-4543-b35e-1ff2109f2869"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 212 images belonging to 2 classes.\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, confusion_matrix\n","import seaborn as sns\n","\n","# Evaluate on test set\n","test_loss, test_acc = model.evaluate(test_data)\n","print(f\"✅ Test Accuracy: {test_acc*100:.2f}%\")\n","\n","# Predictions\n","y_pred = model.predict(test_data)\n","y_pred_classes = (y_pred > 0.5).astype(\"int32\")  # convert probabilities to 0/1\n","y_true = test_data.classes  # actual labels\n","\n","# Confusion Matrix\n","cm = confusion_matrix(y_true, y_pred_classes)\n","\n","plt.figure(figsize=(6,4))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"Fake\", \"Real\"], yticklabels=[\"Fake\", \"Real\"])\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n","\n","# Classification Report\n","print(\"Classification Report:\")\n","print(classification_report(y_true, y_pred_classes, target_names=[\"Fake\", \"Real\"]))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":741},"id":"P1NPHihg1sbS","executionInfo":{"status":"ok","timestamp":1755850549556,"user_tz":-330,"elapsed":131190,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"77f3c8d4-fc16-431a-cb06-593ee10cce53"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n","/usr/local/lib/python3.12/dist-packages/PIL/Image.py:1047: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 9s/step - accuracy: 0.6070 - loss: 0.6711\n","✅ Test Accuracy: 70.75%\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m65s\u001b[0m 9s/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","        Fake       0.86      0.47      0.61       102\n","        Real       0.65      0.93      0.77       110\n","\n","    accuracy                           0.71       212\n","   macro avg       0.76      0.70      0.69       212\n","weighted avg       0.75      0.71      0.69       212\n","\n"]}]},{"cell_type":"code","source":["test_loss, test_acc = model.evaluate(test_data)\n","print(f\"✅ Test Accuracy: {test_acc*100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_xNZH4Da2W5x","executionInfo":{"status":"ok","timestamp":1755850679777,"user_tz":-330,"elapsed":84552,"user":{"displayName":"surya m n","userId":"14579928003229512887"}},"outputId":"ef38c4ce-3263-47b5-9687-4fb73d45ea66"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/PIL/Image.py:1047: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 8s/step - accuracy: 0.6070 - loss: 0.6711\n","✅ Test Accuracy: 70.75%\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Yvf3mZ5721sc"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1NwmIq8TeqglepGH_IfZwkyJmZzi6nQ6T","timestamp":1755859260340}],"authorship_tag":"ABX9TyMMwxFtl9S4oA3trVbjTKY0"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}